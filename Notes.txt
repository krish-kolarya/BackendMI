//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                            Package.json
/*
In package.json, the "main": "index.js" field specifies the entry point of the packageâ€”the default 
file that will be loaded when someone imports or requires your package.
How It Works
When another module runs:
require('your-package') (CommonJS)
import 'your-package' (ESM)
Node.js looks at the "main" field to determine which file to execute first.
*/

/*
In a package.json file, the "type" field determines how JavaScript files in the package are 
treatedâ€”whether they use CommonJS (require) or (European Computer Manufacturers Association)ECMAScript Modules (ESM) (import).
You can override the global "type" setting by using explicit extensions:
.mjs â†’ Always treated as ESM
.cjs â†’ Always treated as CommonJS
.js â†’ Follows the "type" field in package.json
*/

/*
devDependencies are packages that are only needed during development and not in production. These 
typically include tools for testing, linting, transpiling, and bundling code.
*/


/*
The "scripts" section in package.json defines custom terminal commands that you can run using npm run 
<script-name>. These scripts can automate tasks like starting a server, running tests, or building a 
project.
EX: "scripts": {
  "dev": "nodemon -r dotenv/config src/index.js"
}

When you run:
npm run dev

It executes the following command:
nodemon -r dotenv/config src/index.js

Breaking It Down:
                          nodemon

A tool that automatically restarts your Node.js app when file changes are detected.
Installed as a dev dependency (npm install nodemon --save-dev).
-r dotenv/config

The -r flag (or --require) tells Node.js to pre-load a module before running the app.
dotenv/config loads environment variables from a .env file before executing src/index.js.
src/index.js

This is the entry point of your application (inside the src/ folder).
Nodemon watches for changes and restarts the app when needed.

Common Script Commands
Script Name	Command	Purpose
"start"	node index.js	(Starts the application.)
"dev"	nodemon index.js	(Starts the app in development mode with auto-restart.)
"test"	jest	(Runs unit tests.)
"build"	webpack --mode production	(Builds the project for production.)
"lint"	eslint .	(Runs ESLint to check for errors.)
"serve"	http-server ./dist	(Serves static files.)
*/


/*
The "dependencies" field in package.json lists the npm packages required for the application to run in production.
*/





//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////




                                        Differences Between package.json and package-lock.json

                Feature	package.json	                             package-lock.json
Purpose	      Lists dependencies with version ranges	             Locks exact dependency versions
Controls	  Direct dependencies	                                 Direct & nested dependencies
Versioning	   Uses ^ and ~ for flexibility	                     Stores precise versions
Required in Git?	âœ… Yes	                                   âœ… Recommended



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Why is .gitignore Required?
A .gitignore file is used in Git repositories to prevent unwanted files from being tracked. 
It ensures that only necessary files are committed, avoiding security risks, large file uploads, 
and unnecessary clutter.


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

What is .prettierrc?
.prettierrc is a configuration file for Prettier, a code formatting tool that enforces consistent code
style in JavaScript, TypeScript, and other languages.


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

What is a .env File?
A .env file (short for "environment file") is used to store environment variables for a project. It 
helps keep sensitive data like API keys, database credentials, and configuration settings separate 
from the code.

Why Use .env?
âœ… Security â€“ Prevents sensitive data from being exposed in public repositories.
âœ… Configuration Management â€“ Keeps environment-specific settings separate from code.
âœ… Portability â€“ Makes it easy to share configurations without hardcoding values.

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

.gitkeep:

We make .gitkeep in empty folders. These files are empty and only made for the sole purpose so that the folders can be pushed 
into the github. As empty folders cannot be so after making this .gitkeep folder into it one can commit and push this folder.


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                Explanation of the src/ Folder Structure

src/ folder follows a well-structured MVC (Model-View-Controller) architecture, which is commonly used
in Node.js backend applications. Below is a breakdown of each folder and file:

1. controllers/ (Handles Business Logic)
Contains functions that handle requests and responses.
Calls services or interacts with models.
Example: controllers/userController.js

const User = require("../models/User");

exports.getUsers = async (req, res) => {
  const users = await User.find();
  res.json(users);
};

2. db/ (Database Configuration)
Handles database connection and initialization.
Example: db/connection.js (for MongoDB using Mongoose)

const mongoose = require("mongoose");

mongoose.connect(process.env.DB_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

module.exports = mongoose;

3. middleware/ (Custom Middleware Functions)
Contains authentication, logging, error handling, etc.
Example: middleware/auth.js

module.exports = (req, res, next) => {
  if (!req.user) return res.status(401).json({ message: "Unauthorized" });
  next();
};

4. models/ (Database Schema & Models)
Defines the structure of data stored in the database.
Example: models/User.js (for MongoDB)

const mongoose = require("mongoose");

const userSchema = new mongoose.Schema({
  name: String,
  email: String,
  password: String,
});

module.exports = mongoose.model("User", userSchema);

5. routes/ (Defines API Endpoints)
Handles all HTTP request routes (GET, POST, PUT, DELETE).
Example: routes/userRoutes.js

const express = require("express");
const router = express.Router();
const { getUsers } = require("../controllers/userController");

router.get("/users", getUsers);

module.exports = router;

6. utils/ (Utility & Helper Functions)
Stores reusable utility functions like error handlers, hashing, etc.
Example: utils/hashPassword.js

const bcrypt = require("bcrypt");

module.exports = (password) => bcrypt.hashSync(password, 10);

7. app.js (Express App Configuration)
Initializes the Express app, middleware, and routes.
Example:

const express = require("express");
const app = express();
const userRoutes = require("./routes/userRoutes");

app.use(express.json());
app.use("/api", userRoutes);

module.exports = app;

8. constants.js (Global Constants)
Stores constant values (e.g., error messages, API response codes).
Example:

module.exports = {
  STATUS_OK: 200,
  STATUS_NOT_FOUND: 404,
};

9. index.js (Entry Point of the App)
Starts the server and connects to the database.
Example:

const app = require("./app");
const mongoose = require("./db/connection");

app.listen(3000, () => console.log("Server running on port 3000"));

///*
.catch() â†’ Catches errors from DBConnection() (Promise-based errors).
app.on("error") â†’ Listens to Express server errors during runtime
*///

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


                                            dotenv

dotenv is a package that loads environment variables from a .env file into process.env in Node.js 
applications. This helps keep sensitive data (like API keys, database credentials) secure and 
configurable without hardcoding them into the code.


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


                                              Express
/**                                              
Express.js (or simply Express) is a minimal and flexible Node.js web application framework that simplifies building web 
applications and APIs. 
It provides a set of features to develop both web and mobile applications.

ðŸ›  Why Use Express?
Simplifies Server Creation:
Node.js by itself is powerful but low-level. Express makes it easier to handle requests, routes, and responses
 without writing boilerplate code.

Minimal & Fast:
Itâ€™s lightweight but highly extensible, allowing developers to build anything from simple sites to complex APIs.

Middleware Support:
Express uses middleware functions to process requests. Middleware can handle tasks like authentication, logging, 
and parsing data.

Routing Made Easy:
Express provides a clean way to define different routes (URLs) for your web application.

const express = require('express');
const app = express();
const PORT = 3000;

// Define a route
app.get('/', (req, res) => {
  res.send('Hello, World!');
});

// Start the server
app.listen(PORT, () => {
  console.log(`Server is running on http://localhost:${PORT}`);
});

**/


/**
Basic Express Example

const express = require('express');
const app = express();
const PORT = 3000;

// Define a route
app.get('/', (req, res) => {
  res.send('Hello, World!');
});

// Start the server
app.listen(PORT, () => {
  console.log(`Server is running on http://localhost:${PORT}`);
});


ðŸ’¡ Whatâ€™s Happening Here?
require('express'): Loads the Express module.
app.get('/', ...): Defines a GET route at '/' that sends "Hello, World!".
app.listen(PORT, ...): Starts the server on port 3000.
**/

 Key Express Concepts:

Routing:
Handling URLs and HTTP methods (GET, POST, etc.)

app.get('/about', (req, res) => res.send('About Page'));
app.post('/submit', (req, res) => res.send('Form Submitted'));



Middleware:
Functions that run during request-response cycles.
app.use(express.json()); // Parses JSON bodies



Serving Static Files:
To serve files like HTML, CSS, JS:
app.use(express.static('public'));



Error Handling:
Express has built-in mechanisms for handling errors.

app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).send('Something broke!');
});


/////////////////////////////////////////////////////////
                      bcrypt

Purpose:
bcrypt is a password hashing library. It is used to transform a plain text password into a secure, hashed representation 
before storing it in a database.

Why Use bcrypt?

Security: Storing plain text passwords is highly insecure. Hashing transforms passwords into an irreversible format.
Salted Hashing: bcrypt automatically incorporates a salt (random data) into the hash, which defends against rainbow 
table attacks.
Adaptive: It can be configured to increase computational complexity over time, which makes brute-force attacks less 
feasible as hardware improves.

/////////////////////////////////////////////////////////

                      JWT

Purpose:
JWT is used to securely transmit information between parties (like a server and a client) in a compact, self-contained token.

Why Use JWT?

Stateless Authentication: After a user logs in, a JWT is issued and can be used to authenticate subsequent requests 
without needing to store session data on the server.
Integrity and Verification: A JWT is signed (using a secret or a public/private key pair), so the recipient can verify 
its authenticity and ensure it hasn't been tampered with.
Flexibility: JWTs can include various pieces of user-related information (claims) which can be used to implement 
fine-grained access control.

Combined Role in Authentication
Password Handling:
When a user registers or logs in, bcrypt hashes the provided password and later verifies it during authentication.

Token Issuance:
Once authenticated, JWT is used to generate an access token (and often a refresh token) that the client uses to prove 
its identity on future requests.

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                        
                                                mongoose:


What is Mongoose?
Mongoose is an Object Data Modeling (ODM) library for MongoDB and Node.js. It provides a straightforward, 
schema-based solution to model application data, ensuring validation, type casting, query building, and business logic 
implementation.

Why Use Mongoose?
Schema-based modeling: Define schemas to enforce structure in MongoDB documents.
Validation: Automatically validate data before saving.
Middleware (Hooks): Run logic before/after database operations.
Query Helpers: Simplifies querying and data manipulation.
Population: Efficiently reference documents across collections.

It is used in Node.js applications to interact with MongoDB databases efficiently.

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                                                      multer

What is multer?
multer is a Node.js middleware used for handling file uploads in Express.js applications. It allows users to upload files, 
such as images, videos, or documents, and saves them to a specified location on the server.

How multer Works
Receives a file from the client (e.g., from a form).
Stores it in memory or disk (depending on configuration). 
Provides access to the fileâ€™s details (like name, size, type).

